#pragma once

//---------------------------------
// FilterParams
//
// Parameters to operate a filter from
//
class FilterParams
{
public:
	//---------------------------------
	// FilterMode
	//
	// What frequencies to cut off
	//
	enum class FilterMode 
	{
		lowPass, // (high does not pass)
		highPass,
		bandPass
	};

	// constructor
	FilterParams();
	FilterParams(FilterMode const mode, float const cutoff, float const resonance);

	void SetMode(FilterMode const val) { m_Mode = val; }
	void SetCutoff(float const val);
	void SetResonance(float const val);

	// Getters
	FilterMode GetMode() const { return m_Mode; }
	float GetCutoff() const { return m_Cutoff; }
	float GetResonance() const { return m_Resonance; }
	float GetFeedbackAmount() const { return m_FeedbackAmount; }

private:

	// Calculate derived variables
	void CalculateFeedbackAmount();

	// Data
	/////////

	// set parameters
	FilterMode m_Mode = FilterMode::lowPass;

	float m_Cutoff = 0.9999f;
	float m_Resonance = 0.f;

	// derived
	float m_FeedbackAmount;
};

//---------------------------------
// Filter
//
// Filters out a range of frequencies from the sounds generated by oscillators
//
class Filter
{
public:
	Filter(FilterParams const& params) : m_Params(params) {}

	// processing function
	float GetSignal(float const input);

private:

	// Data
	/////////

	FilterParams const& m_Params;

	float m_Buf0 = 0.f;
	float m_Buf1 = 0.f;
	float m_Buf2 = 0.f;
	float m_Buf3 = 0.f;
};