#pragma once

//---------------------------------
// FilterParams
//
// Parameters to operate a filter from
//
class FilterParams
{
public:
	//---------------------------------
	// FilterMode
	//
	// What frequencies to cut off
	//
	enum class FilterMode 
	{
		lowPass, // (high does not pass)
		highPass,
		bandPass
	};

	// constructor
	FilterParams();
	FilterParams(FilterMode const mode, double const cutoff, double const resonance);

	// Getters
	FilterMode GetMode() const { return m_Mode; }
	double GetCutoff() const { return m_Cutoff; }
	double GetResonance() const { return m_Resonance; }
	double GetFeedbackAmount() const { return m_FeedbackAmount; }

private:

	// Calculate derived variables
	void CalculateFeedbackAmount();

	// Data
	/////////

	// set parameters
	FilterMode m_Mode = FilterMode::lowPass;

	double m_Cutoff = 0.99;
	double m_Resonance = 0.0;

	// derived
	double m_FeedbackAmount;
};

//---------------------------------
// Filter
//
// Filters out a range of frequencies from the sounds generated by oscillators
//
class Filter
{
public:
	Filter(FilterParams const& params) : m_Params(params) {}

	// processing function
	double GetSignal(double const input);

private:

	// Data
	/////////

	FilterParams const& m_Params;

	double m_Buf0 = 0.0;
	double m_Buf1 = 0.0;
	double m_Buf2 = 0.0;
	double m_Buf3 = 0.0;
};